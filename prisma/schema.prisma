generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64"]
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "ER図"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Projects {
  id          String   @id @default(uuid())
  name        String
  status      ProjectStatus @default(ACTIVE)
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wbs         Wbs[]

  @@map("projects")
}

model Users {
  id         String          @id
  email      String          @unique
  name       String
  displayName String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  statusLogs TaskStatusLog[] @relation("StatusChanger")
  assignees  WbsAssignee[]   @relation("WbsAssignee")
  workRecords WorkRecord[]
  schedules  UserSchedule[]
  @@map("users")
}

model Wbs {
  id        Int        @id @default(autoincrement())
  projectId String
  name      String
  project   Projects   @relation(fields: [projectId], references: [id])
  phases    WbsPhase[]
  tasks     WbsTask[]
  assignees WbsAssignee[]
  kosus     TaskKosu[]
  buffers   WbsBuffer[]
  milestones Milestone[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("wbs")
}

model WbsAssignee {
  id        Int        @id @default(autoincrement())
  wbsId     Int
  assigneeId String
  rate      Float      @default(1.0) // 参画率（0.01〜1.0）
  wbs       Wbs        @relation(fields: [wbsId], references: [id])
  assignee  Users      @relation("WbsAssignee", fields: [assigneeId], references: [id])
  tasks     WbsTask[]  @relation("TaskAssignee")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("wbs_assignee")
}

model WbsPhase {
  id         Int       @id @default(autoincrement())
  wbsId      Int
  name       String
  code       String    @unique
  seq        Int
  wbs        Wbs       @relation(fields: [wbsId], references: [id])
  tasks      WbsTask[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("wbs_phase")
}

model PhaseTemplate {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  code      String     @unique
  seq       Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("phase_template")
}

model WbsBuffer {
  id         Int        @id @default(autoincrement())
  wbsId      Int
  name       String
  buffer     Int
  bufferType BufferType @default(OTHER)
  wbs        Wbs        @relation(fields: [wbsId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("wbs_buffer")
}

model WbsTask {
  id               Int              @id @default(autoincrement())
  taskNo           String           
  wbsId            Int
  phaseId          Int?
  name             String
  assigneeId       Int?
  status           TaskStatus       @default(NOT_STARTED)
  wbs              Wbs              @relation(fields: [wbsId], references: [id])
  phase            WbsPhase?        @relation(fields: [phaseId], references: [id])
  assignee         WbsAssignee?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  statusLogs       TaskStatusLog[]  @relation("TaskStatusLogs")
  periods          TaskPeriod[]     @relation("TaskPeriod")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  workRecords      WorkRecord[]

  @@unique(fields: [taskNo,wbsId])
  @@map("wbs_task")
}

model TaskPeriod {
  id        Int        @id @default(autoincrement())
  taskId    Int
  startDate DateTime
  endDate   DateTime
  type      PeriodType
  task      WbsTask    @relation("TaskPeriod", fields: [taskId], references: [id], onDelete: Cascade)
  kosus     TaskKosu[] @relation("TaskPeriodKosu")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("task_period")
}

model TaskKosu{
  id        Int        @id @default(autoincrement())
  wbsId     Int
  periodId  Int
  kosu      Int
  type      KosuType
  period    TaskPeriod @relation("TaskPeriodKosu", fields: [periodId], references: [id], onDelete: Cascade)
  wbs       Wbs        @relation(fields: [wbsId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("task_kosu")
}

model TaskStatusLog {
  id        Int        @id @default(autoincrement())
  taskId    Int
  status    TaskStatus
  changedAt DateTime
  changedBy String?
  task      WbsTask    @relation("TaskStatusLogs",fields: [taskId], references: [id])
  changer   Users?     @relation("StatusChanger", fields: [changedBy], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("task_status_log")
}

model Milestone {
  id        Int        @id @default(autoincrement())
  wbsId     Int
  name      String
  date      DateTime
  wbs       Wbs        @relation(fields: [wbsId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("milestone")
}

model WorkRecord {
  id                Int        @id @default(autoincrement())
  userId            String
  taskId            Int?
  date              DateTime
  hours_worked      Int
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              Users      @relation(fields: [userId], references: [id])
  task              WbsTask?   @relation(fields: [taskId], references: [id])

  @@map("work_records")
}

model UserSchedule {
  id          Int      @id @default(autoincrement())
  userId      String
  date        DateTime
  startTime   String
  endTime     String
  title       String
  location    String?
  description String?
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
  @@map("user_schedule")
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ProjectStatus {
  INACTIVE
  ACTIVE
  DONE
  CANCELLED
  PENDING
}

enum BufferType {
  RISK
  OTHER
}

enum PeriodType {
  KIJUN
  YOTEI
  JISSEKI
}

enum KosuType {
  NORMAL
  RISK
}